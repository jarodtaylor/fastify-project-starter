name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Test the template itself
  template-validation:
    name: 🏗️ Template Validation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type check
        run: pnpm typecheck

      - name: 🎨 Lint check
        run: pnpm lint

      - name: 🎨 Format check
        run: pnpm format:check

      - name: 🏗️ Build check
        run: pnpm build

      - name: 🗄️ Database setup
        run: |
          cp .env.example .env
          cp packages/database/.env.example packages/database/.env
          pnpm db:push

      - name: 🧪 Template functionality test
        run: |
          timeout 30s pnpm dev &
          sleep 20
          # Test API endpoint
          curl -f http://localhost:3000/api/todos || exit 1
          # Test Web app (basic check)
          curl -f http://localhost:5173 || exit 1
          pkill -f "pnpm dev" || true

  # Test CLI build and basic functionality
  cli-validation:
    name: 🛠️ CLI Validation
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Install CLI dependencies
        run: cd cli && pnpm install --frozen-lockfile

      - name: 🔍 CLI type check
        run: cd cli && pnpm typecheck

      - name: 🏗️ Build CLI
        run: cd cli && pnpm build

      - name: 🧪 CLI help test
        run: node cli/dist/index.js --help

      - name: 🧪 CLI version test
        run: node cli/dist/index.js --version

      - name: 📁 Verify template structure
        run: |
          ls cli/template/packages/ | grep -E "(database|shared-utils|typescript-config)" || exit 1
          ls cli/template/apps/ | grep -E "(api|web)" || exit 1

  # Test CLI project generation
  cli-generation-test:
    name: 🚀 CLI Generation Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-case:
          - name: "default"
            args: "--no-git"
          - name: "no-install"
            args: "--no-install --no-git"
          - name: "postgres"
            args: "--db postgres --no-git"
          - name: "eslint"
            args: "--lint eslint --no-git"

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Install CLI dependencies
        run: cd cli && pnpm install --frozen-lockfile

      - name: 🏗️ Build CLI
        run: cd cli && pnpm build

      - name: 🚀 Generate test project
        run: |
          cd /tmp
          node $GITHUB_WORKSPACE/cli/dist/index.js test-${{ matrix.test-case.name }} ${{ matrix.test-case.args }}

      - name: 🔍 Verify project structure
        run: |
          cd /tmp/test-${{ matrix.test-case.name }}
          ls packages/ | grep -E "(database|shared-utils|typescript-config)" || exit 1
          ls apps/ | grep -E "(api|web)" || exit 1

      - name: 🔍 Verify variable replacement
        run: |
          cd /tmp/test-${{ matrix.test-case.name }}
          # Should find the new project name
          grep -r "test-${{ matrix.test-case.name }}" package.json || exit 1
          # Should not find old template name (minimal occurrences)
          ! grep -r "fastify-react-router-starter" package.json || exit 1

      - name: 📦 Test dependency installation (if not skipped)
        if: ${{ !contains(matrix.test-case.args, '--no-install') }}
        run: |
          cd /tmp/test-${{ matrix.test-case.name }}
          ls node_modules/ || exit 1

      - name: 📦 Manual dependency installation (if skipped)
        if: ${{ contains(matrix.test-case.args, '--no-install') }}
        run: |
          cd /tmp/test-${{ matrix.test-case.name }}
          pnpm install

      - name: 🔍 Test TypeScript compilation
        run: |
          cd /tmp/test-${{ matrix.test-case.name }}
          pnpm typecheck

      - name: 🎨 Test linting
        run: |
          cd /tmp/test-${{ matrix.test-case.name }}
          pnpm lint

      - name: 🏗️ Test build
        run: |
          cd /tmp/test-${{ matrix.test-case.name }}
          # Set up database for build test
          cp .env.example .env
          cp packages/database/.env.example packages/database/.env
          pnpm db:push
          pnpm build

  # End-to-end test with full project functionality
  e2e-test:
    name: 🎯 End-to-End Test
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Install CLI dependencies
        run: cd cli && pnpm install --frozen-lockfile

      - name: 🏗️ Build CLI
        run: cd cli && pnpm build

      - name: Generate full test project
        run: |
          cd /tmp
          node $GITHUB_WORKSPACE/cli/dist/index.js e2e-test --no-git

      - name: 🧪 Test generated project functionality
        run: |
          cd /tmp/e2e-test

          # Set up database
          cp .env.example .env
          cp packages/database/.env.example packages/database/.env
          pnpm db:push

          # Start the development servers in background
          timeout 45s pnpm dev &
          sleep 25

          # Test API endpoints
          curl -f http://localhost:3000/api/todos || exit 1

          # Test API POST (create todo)
          curl -f -X POST http://localhost:3000/api/todos \
            -H "Content-Type: application/json" \
            -d '{"title":"Test Todo","completed":false}' || exit 1

          # Test Web app loads
          curl -f http://localhost:5173 || exit 1

          # Cleanup
          pkill -f "pnpm dev" || true

  # Security and dependency checks
  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Audit dependencies (main project)
        run: pnpm audit --audit-level moderate

      - name: 🔒 Audit dependencies (CLI)
        run: cd cli && pnpm audit --audit-level moderate

  # Documentation validation
  docs-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Check for broken links in README
        run: |
          # Basic link validation (could be enhanced with a tool)
          grep -o 'https://[^)]*' README.md | while read url; do
            echo "Checking $url"
            curl -f --head "$url" || echo "Warning: $url might be broken"
          done

      - name: 🔍 Verify CLI documentation is up to date
        run: |
          # Check that CLI version in package.json matches references
          CLI_VERSION=$(grep '"version"' cli/package.json | cut -d'"' -f4)
          if ! grep -q "$CLI_VERSION" DEVELOPMENT.md; then
            echo "Warning: CLI version $CLI_VERSION not found in DEVELOPMENT.md"
          fi

      - name: 🔍 Check documentation structure
        run: |
          # Verify key documentation files exist and have content
          test -s README.md || exit 1
          test -s CONTRIBUTING.md || exit 1
          test -s DEVELOPMENT.md || exit 1

          # Check for required sections in CONTRIBUTING.md
          grep -q "CLI Development Workflow" CONTRIBUTING.md || exit 1
          grep -q "Publishing and Release Process" CONTRIBUTING.md || exit 1
          grep -q "Debugging and Troubleshooting" CONTRIBUTING.md || exit 1
